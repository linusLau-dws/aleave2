package hk.com.dataworld.leaveapp;

import android.Manifest;
import android.app.Dialog;
import android.bluetooth.BluetoothAdapter;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.beardedhen.androidbootstrap.BootstrapButton;
import com.bumptech.glide.Glide;
import com.evrencoskun.tableview.TableView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import no.nordicsemi.android.support.v18.scanner.BluetoothLeScannerCompat;
import no.nordicsemi.android.support.v18.scanner.ScanCallback;
import no.nordicsemi.android.support.v18.scanner.ScanFilter;
import no.nordicsemi.android.support.v18.scanner.ScanResult;
import no.nordicsemi.android.support.v18.scanner.ScanSettings;

import static hk.com.dataworld.leaveapp.Constants.PREF_SERVER_ADDRESS;
import static hk.com.dataworld.leaveapp.Constants.PREF_TOKEN;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BD_Description;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BD_Name;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_Address;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_DateTime;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_Description;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_InOut;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_Status;
import static hk.com.dataworld.leaveapp.SQLiteHelper.BT_SyncTime;
import static hk.com.dataworld.leaveapp.Utility.extendBaseUrl;
import static hk.com.dataworld.leaveapp.Utility.getDayOfWeekSuffixedString;

public class BluetoothNewActivity extends BaseActivity {

    private TableLayout mTableLayout;
    private BluetoothAdapter mBluetoothAdapter;
    private CountDownTimer mCountdownTimer;

    private String mToken;
    private String mBaseURL;
    //    private String mBdName = null, mBdAddr = null;
    private RequestQueue mRequestQueue;
    private List<String> mBd_Name = new ArrayList<>();
    private List<String> mBd_Addr = new ArrayList<>();

    private BootstrapButton mInButton;
    private BootstrapButton mOutButton;
    private LinearLayout mLayout;

    private SQLiteHelper dbHelper;
    private Dialog mDialog;

    private boolean mIsFound = false;

    private BluetoothLeScannerCompat mScanner = BluetoothLeScannerCompat.getScanner();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        int hasPermission = ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION);
        ActivityCompat.requestPermissions(this,
                new String[]{
                        android.Manifest.permission.ACCESS_COARSE_LOCATION},
                103);

        dbHelper = new SQLiteHelper(this);
        tryRefreshReceptors();
    }

    private void tryRefreshReceptors() {
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        mBaseURL = extendBaseUrl(prefs.getString(PREF_SERVER_ADDRESS, ""));
        mToken = prefs.getString(PREF_TOKEN, "");

        mRequestQueue = Volley.newRequestQueue(this);
        JSONObject obj = new JSONObject();
        try {
            obj.put("token", mToken);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        JsonObjectRequest req = new JsonObjectRequest(JsonObjectRequest.Method.POST,
                String.format("%s%s", mBaseURL, "GetBluetoothReceiverID"), obj, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                try {
                    JSONArray arr = response.getJSONArray("d");
                    dbHelper.openDB();
                    dbHelper.clearReceptors();
                    for (int x = 0; x < arr.length(); x++) {
                        JSONObject obj = arr.getJSONObject(x);
//                        mBd_Name.add(obj.getString("BD_NAME"));
//                        mBd_Addr.add(obj.getString("BD_ADDR"));
                        Log.i("test", "test");
                        dbHelper.insertReceptor(obj.getString("BD_NAME"), obj.getString("Description"), obj.getString("BD_ADDR"));
                    }
                    dbHelper.closeDB();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                payload();
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                payload();
            }
        });
        mRequestQueue.add(req);
    }

    private void payload() {
        getSupportActionBar().setTitle(R.string.btn_attendanceCamel);
//        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        setContentView(R.layout.activity_bluetooth_new);

        forceAutoTime();

        BootstrapButton findButton = findViewById(R.id.find_button);
        findButton.setText(R.string.bluetooth_check_bd_logo);
        findButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mCountdownTimer.pause();
                //mIsEnableRestartBehaviour = false;
                finish();
                Intent intent = new Intent(BluetoothNewActivity.this, BluetoothFindActivity.class);
                startActivity(intent);
            }
        });

        mTableLayout = findViewById(R.id.myRecords);
        updateTable();
//        BluetoothDeviceAdapter adaptor = new BluetoothDeviceAdapter(this);
//        mTableView.setAdapter(adaptor);
    }

    private void forceAutoTime() {
        // Force user to turn on autotime
        String isAutoTimeSet = Settings.System.getString(this.getContentResolver(),
                Settings.Global.AUTO_TIME);
        // Verify if timezone is +8
        String isAutoTimeZoneSet = Settings.System.getString(this.getContentResolver(),
                Settings.Global.AUTO_TIME_ZONE);

        Log.i("autotime", isAutoTimeZoneSet);

        if (isAutoTimeSet.equals("0") || isAutoTimeZoneSet.equals("0")) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                boolean hasWriteSettingsAbility = Settings.System.canWrite(this);
                if (hasWriteSettingsAbility) {
                    Log.i("autotime", "has write ability");
                    Settings.System.putString(
                            this.getContentResolver(),
                            Settings.Global.AUTO_TIME, "1");
                } else {
                    Log.i("autotime", "has no write ability");
//                    AlertDialog.Builder builder = new AlertDialog.Builder(this)
//                            .setMessage(R.string.attendance_function_requires_autotime)
//                            .setCancelable(true)
//                            .setPositiveButton(R.string.attendance_go_to_settings, new DialogInterface.OnClickListener() {
//                                @Override
//                                public void onClick(DialogInterface dialogInterface, int i) {
//                                    startActivityForResult(new Intent(android.provider.Settings.ACTION_DATE_SETTINGS), 104);
//                                }
//                            });
//                    builder.create().show();

                    mDialog = new Dialog(this) {
                        @Override
                        protected void onCreate(Bundle savedInstanceState) {
                            super.onCreate(savedInstanceState);
                            setContentView(R.layout.autotime_dialog);
                            BootstrapButton backButton = findViewById(R.id.backButton);
                            backButton.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    mCountdownTimer.pause();
                                    mScanner.stopScan(new ScanCallback() {
                                        @Override
                                        public void onScanResult(int callbackType, @NonNull ScanResult result) {
                                            super.onScanResult(callbackType, result);
                                        }

                                        @Override
                                        public void onBatchScanResults(@NonNull List<ScanResult> results) {
                                            super.onBatchScanResults(results);
                                        }

                                        @Override
                                        public void onScanFailed(int errorCode) {
                                            super.onScanFailed(errorCode);
                                        }
                                    });
                                    finish();
                                    Intent intent = new Intent(BluetoothNewActivity.this, SelectionActivity.class);
                                    startActivity(intent);
                                }
                            });

                            ImageView iv = findViewById(R.id.instructionAnim);
                            Glide.with(BluetoothNewActivity.this).asGif().load(R.raw.force_autotime).into(iv);
                            TextView txt = findViewById(R.id.instructionTxt);
                            txt.setText(R.string.attendance_function_requires_autotime);
                            Button goToSettings = findViewById(R.id.go_to_settings_button);
                            goToSettings.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    startActivityForResult(new Intent(android.provider.Settings.ACTION_DATE_SETTINGS), 104);
                                }
                            });
                            setCancelable(false);
                        }
                    };
                    mDialog.show();
                }
            }
        } else {
            mInButton = findViewById(R.id.in_button);
            mOutButton = findViewById(R.id.out_button);
            mLayout = findViewById(R.id.bluetooth_container);
            bluetoothContent();
        }
    }

    private void updateTable() {
        TableView tableView = findViewById(R.id.recordsTableView);
        List<CellModel> headings = new ArrayList<>();
        headings.add(new CellModel(getString(R.string.bluetooth_record_date_time)));
        headings.add(new CellModel(getString(R.string.bluetooth_record_in_out)));
        headings.add(new CellModel(getString(R.string.bluetooth_record_status)));
        headings.add(new CellModel(getString(R.string.bluetooth_description)));
        headings.add(new CellModel(getString(R.string.bluetooth_record_sync_time)));

        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        tableView.setTranslationX(-200);
        tableView.getLayoutParams().width = displayMetrics.widthPixels + 200;

        BluetoothDeviceAdapter adapter = new BluetoothDeviceAdapter(this);

        List<List<CellModel>> cells = new ArrayList<>();

        dbHelper.openDB();
        mTableLayout.removeViews(1, mTableLayout.getChildCount() - 1);
        ArrayList<ContentValues> arr = dbHelper.getAllRecords();
        for (ContentValues c :
                arr) {
            List<CellModel> tmp = new ArrayList<>();

            TableRow row = new TableRow(BluetoothNewActivity.this);
            TextView t1 = new TextView(BluetoothNewActivity.this);
            String dateTime = c.getAsString(BT_DateTime);


            tmp.add(new CellModel(String.format("%s %s", getDayOfWeekSuffixedString(this, dateTime.substring(0, 10)), dateTime.substring(11))));


            t1.setText(String.format("%s %s", getDayOfWeekSuffixedString(this, dateTime.substring(0, 10)), dateTime.substring(11)));
            TextView t2 = new TextView(BluetoothNewActivity.this);


            tmp.add(new CellModel(c.getAsInteger(BT_InOut) == 0 ? getString(R.string.bluetooth_in) : getString(R.string.bluetooth_out)));

            t2.setText(c.getAsInteger(BT_InOut) == 0 ? getString(R.string.bluetooth_in) : getString(R.string.bluetooth_out));
            t2.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
            TextView t3 = new TextView(BluetoothNewActivity.this);


            tmp.add(new CellModel(c.getAsInteger(BT_Status) == 0 ? getString(R.string.status_pending) : getString(R.string.bluetooth_success)));


            t3.setText(c.getAsInteger(BT_Status) == 0 ? getString(R.string.status_pending) : getString(R.string.bluetooth_success));
            t3.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
            TextView t4 = new TextView(BluetoothNewActivity.this);


            tmp.add(new CellModel(c.getAsString(BT_Description)));
            tmp.add(new CellModel(c.getAsString(BT_SyncTime) == null ? "" : c.getAsString(BT_SyncTime)));


            t4.setText(c.getAsString(BT_SyncTime));
            row.addView(t1);
            row.addView(t2);
            row.addView(t3);
            row.addView(t4);

            cells.add(tmp);

            mTableLayout.addView(row);
        }
        dbHelper.closeDB();


        List<CellModel> rows = new ArrayList<>();
        for (int z = 0; z < arr.size(); z++) {
            rows.add(new CellModel(String.valueOf(z + 1)));
        }

        adapter.setAllItems(headings, rows, cells);
        tableView.setAdapter(adapter);
    }

    private void bluetoothContent() {
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        androidx.appcompat.app.AlertDialog.Builder builder;
        if (mBluetoothAdapter == null) {
            builder = new androidx.appcompat.app.AlertDialog.Builder(this);
            builder.setMessage(R.string.bluetooth_function_unavailable);
            builder.setCancelable(false);
            builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    finish();
                    dialog.dismiss();
                }
            });
            builder.create().show();
        } else {
            dbHelper.openDB();
            final ArrayList<String> addresses = dbHelper.getReceptorAddresses();
            dbHelper.closeDB();

            mDialog = new Dialog(this) {
                @Override
                protected void onCreate(Bundle savedInstanceState) {
                    super.onCreate(savedInstanceState);
                    setContentView(R.layout.activity_bluetooth_saved_receptors2);

                    ImageView anim = findViewById(R.id.searching_anim);
                    Glide.with(BluetoothNewActivity.this).asGif().load(R.raw.bluetooth_searching).into(anim);

                    BluetoothDeviceAdapter adapter = new BluetoothDeviceAdapter(BluetoothNewActivity.this);

                    List<CellModel> headings = new ArrayList<>();
                    headings.add(new CellModel(getString(R.string.bluetooth_name)));
                    headings.add(new CellModel(getString(R.string.bluetooth_description)));


                    List<CellModel> rowHeadings = new ArrayList<>();
                    rowHeadings.add(new CellModel("1"));
                    rowHeadings.add(new CellModel("2"));


                    List<List<CellModel>> cells = new ArrayList<>();
                    dbHelper.openDB();
                    ArrayList<ContentValues> contentValues = dbHelper.getReceptors();
                    Log.i("Receptors", contentValues.toString());
                    for (ContentValues c :
                            contentValues) {
                        List<CellModel> tmp = new ArrayList<>();
                        tmp.add(new CellModel(c.getAsString(BD_Name)));
                        tmp.add(new CellModel(c.getAsString(BD_Description)));
//            tmp.add(new CellModel(c.getAsString(BD_Address)));
                        cells.add(tmp);
                    }
                    dbHelper.closeDB();

                    adapter.setAllItems(headings, rowHeadings, cells);

                    TableView tableView = findViewById(R.id.testTableView);
                    tableView.setAdapter(adapter);
                    DisplayMetrics displayMetrics = new DisplayMetrics();
                    getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                    tableView.setTranslationX(-200);
                    tableView.getLayoutParams().width = displayMetrics.widthPixels + 200;
                }
            };
            mDialog.setCancelable(false);
            mDialog.show();

            // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            if (!mBluetoothAdapter.isEnabled()) {
                Intent i = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivity(i);
            }

//            mScanner = BluetoothLeScannerCompat.getScanner();
            ScanSettings settings = new ScanSettings.Builder()
                    .setLegacy(false)
                    .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).setReportDelay(0)
                    .setUseHardwareBatchingIfSupported(true).build();
            List<ScanFilter> filters = new ArrayList<>();
//        filters.add(new ScanFilter.Builder().setServiceUuid(mUuid).build());
            mScanner.startScan(null, settings, new ScanCallback() {
                @Override
                public void onScanResult(int callbackType, @NonNull final ScanResult result) {
                    super.onScanResult(callbackType, result);
                    Log.i("Resultat", "Resultat");
                    Log.i("Resultat", result.getDevice().getAddress() + " " + result.getDevice().getName());

                    if (addresses.contains(result.getDevice().getAddress())) {
                        mScanner.stopScan(new ScanCallback() {
                            @Override
                            public void onScanResult(int callbackType, @NonNull ScanResult result) {
                                super.onScanResult(callbackType, result);
                            }

                            @Override
                            public void onBatchScanResults(@NonNull List<ScanResult> results) {
                                super.onBatchScanResults(results);
                            }

                            @Override
                            public void onScanFailed(int errorCode) {
                                super.onScanFailed(errorCode);
                            }
                        });

                        if (mDialog.isShowing()) {
                            mDialog.dismiss();
                        }

                        TextView textView = findViewById(R.id.foundDevice);
                        textView.setText(result.getDevice().getName());
                        Log.e("matched", result.getDevice().getName());

                        mIsFound = true;

                        mInButton.setEnabled(true);
                        mOutButton.setEnabled(true);
                        mLayout.setBackgroundColor(getResources().getColor(R.color.colorGreen));
                        mInButton.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                //bluetoothContent();

                                // Log into SQLite
                                dbHelper.openDB();
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
                                String description = dbHelper.findDescriptionByAddress(result.getDevice().getAddress());
                                dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 0, result.getDevice().getAddress(), description);
                                dbHelper.closeDB();

                                //Try sync
                                sync();

                                updateTable();
                            }
                        });
                        mOutButton.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                //bluetoothContent();

                                // Log into SQLite
                                dbHelper.openDB();
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
                                String description = dbHelper.findDescriptionByAddress(result.getDevice().getAddress());
                                dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 1, result.getDevice().getAddress(), description);
                                dbHelper.closeDB();

                                //Try sync
                                sync();

                                updateTable();
                            }
                        });
                    }
                }

                @Override
                public void onBatchScanResults(@NonNull List<ScanResult> results) {
                    super.onBatchScanResults(results);
                    for (final ScanResult result :
                            results) {
                        Log.i("Resultata", "Resultata");
                        Log.i("Resultata", result.getDevice().getAddress() + " " + result.getDevice().getName());

                        if (addresses.contains(result.getDevice().getAddress())) {
                            if (mDialog.isShowing()) {
                                mDialog.dismiss();
                            }

                            TextView textView = findViewById(R.id.foundDevice);
                            textView.setText(result.getDevice().getName());
                            Log.e("matched", result.getDevice().getName());

                            mIsFound = true;

                            mInButton.setEnabled(true);
                            mOutButton.setEnabled(true);
                            mLayout.setBackgroundColor(getResources().getColor(R.color.colorGreen));
                            mInButton.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    //bluetoothContent();

                                    // Log into SQLite
                                    dbHelper.openDB();
                                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
                                    String description = dbHelper.findDescriptionByAddress(result.getDevice().getAddress());
                                    dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 0, result.getDevice().getAddress(), description);
                                    dbHelper.closeDB();

                                    //Try sync
                                    sync();

                                    updateTable();
                                }
                            });
                            mOutButton.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    //bluetoothContent();

                                    // Log into SQLite
                                    dbHelper.openDB();
                                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
                                    String description = dbHelper.findDescriptionByAddress(result.getDevice().getAddress());
                                    dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 1, result.getDevice().getAddress(), description);
                                    dbHelper.closeDB();

                                    //Try sync
                                    sync();

                                    updateTable();
                                }
                            });
                        }
                    }
                }

                @Override
                public void onScanFailed(int errorCode) {
                    super.onScanFailed(errorCode);
                    Log.i("Scan", "failed " + errorCode);
                }
            });

//            BroadcastReceiver br = new BroadcastReceiver() {
//                @Override
//                public void onReceive(Context context, Intent intent) {
//                    String action = intent.getAction();
//                    if (BluetoothDevice.ACTION_FOUND.equals(action)) {
//                        final BluetoothDevice bd = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
//                        int rssi = intent.getShortExtra(BluetoothDevice.EXTRA_RSSI, Short.MIN_VALUE); //Displayed as Strength:
////                        Toast.makeText(BluetoothNewActivity.this,
////                                String.format("%s | %s | %d dBm", bd.getName(), bd.getAddress(), rssi, Locale.ENGLISH),
////                                Toast.LENGTH_SHORT)
////                                .show();
//                        if (addresses.contains(bd.getAddress())) {
//                            if (mDialog.isShowing()) {
//                                mDialog.dismiss();
//                            }
//
//                            TextView textView = findViewById(R.id.foundDevice);
//                            textView.setText(bd.getName());
//                            Log.e("matched", bd.getAddress());
//
//                            mIsFound = true;
//
//                            mInButton.setEnabled(true);
//                            mOutButton.setEnabled(true);
//                            mLayout.setBackgroundColor(getResources().getColor(R.color.colorGreen));
//                            mInButton.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View view) {
//                                    //bluetoothContent();
//
//                                    // Log into SQLite
//                                    dbHelper.openDB();
//                                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
//                                    String description = dbHelper.findDescriptionByAddress(bd.getAddress());
//                                    dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 0, bd.getAddress(), description);
//                                    dbHelper.closeDB();
//
//                                    //Try sync
//                                    sync();
//
//                                    updateTable();
//                                }
//                            });
//                            mOutButton.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View view) {
//                                    //bluetoothContent();
//
//                                    // Log into SQLite
//                                    dbHelper.openDB();
//                                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
//                                    String description = dbHelper.findDescriptionByAddress(bd.getAddress());
//                                    dbHelper.insertLocalAttendance(simpleDateFormat.format(Calendar.getInstance().getTime()), 1, bd.getAddress(), description);
//                                    dbHelper.closeDB();
//
//                                    //Try sync
//                                    sync();
//
//                                    updateTable();
//                                }
//                            });
//                        }
//                    }
//                }
//            };

            mCountdownTimer = new CountDownTimer(1000 * 30, 60000) {
                // Default 120 seconds
                @Override
                public void onTick(long l) {
                    //mBluetoothAdapter.startDiscovery();
                    Log.i("tick", String.valueOf(l));
                }

                @Override
                public void onFinish() {
                    if (!mIsFound) {
                        finish();
                        Intent intent = new Intent(BluetoothNewActivity.this, BluetoothFindActivity.class);
                        intent.putExtra("NOT_FOUND", true);
                        startActivity(intent);
                    }
                }
            };
//            IntentFilter ifr = new IntentFilter(BluetoothDevice.ACTION_FOUND);
//            registerReceiver(br, ifr);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    mCountdownTimer.start();
                }
            });
            thread.start();
        }
    }

    private void sync() {
        try {
            RequestQueue lQueue = Volley.newRequestQueue(this);
            JSONObject obj = new JSONObject();
            final SQLiteHelper dbHelper = new SQLiteHelper(this);
            dbHelper.openDB();
            ArrayList<ContentValues> unsynced = dbHelper.getUnsyncedRecords();
            //get all "SELECT * FROM " +  + " WHERE Status = 0"
            dbHelper.closeDB();

            obj.put("token", mToken);
            JSONArray array = new JSONArray();
            for (ContentValues c :
                    unsynced) {
                JSONObject innerObj = new JSONObject();
                innerObj.put("useragent", System.getProperty("http.agent"));
                innerObj.put("datetime", c.get(BT_DateTime));
                innerObj.put("address", c.get(BT_Address));
                innerObj.put("inout", c.get(BT_InOut));
                array.put(innerObj);
            }
            obj.put("Data", array.toString());
            Log.i("reqContent", obj.toString());

            JsonObjectRequest req = new JsonObjectRequest(JsonObjectRequest.Method.POST,
                    String.format("%s%s", mBaseURL, "BluetoothSyncAttendance"),
                    obj,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {
                            // Return successful dateTime
                            try {
                                JSONObject obj = response.getJSONObject("d");
                                JSONArray datetime = obj.getJSONArray("timestamps");
                                String synctime = obj.getString("synctime");
                                dbHelper.openDB();
                                for (int y = 0; y < datetime.length(); y++) {
                                    Log.i("setsync", "test");
                                    dbHelper.setSynced(datetime.getString(y), synctime);
                                }
                                dbHelper.closeDB();
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }

                            updateTable();
                        }
                    }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    // Maybe not this network
                    Log.i("Sync", error.networkResponse.data.toString());
                }
            });
            lQueue.add(req);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 104) {
            forceAutoTime();
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
//        switch (item.getItemId()) {
//            case android.R.id.home:
//                NavUtils.navigateUpFromSameTask(this);
//                return true;
//        }
        return super.onOptionsItemSelected(item);
    }
//    private syncSelected() {
//        JsonObjectRequest = new JsonObjectRequest();
//        mQueue.add();
//    }


    @Override
    protected void onStop() {
        super.onStop();
        mScanner.stopScan(new ScanCallback() {
            @Override
            public void onScanResult(int callbackType, @NonNull ScanResult result) {
                super.onScanResult(callbackType, result);
            }

            @Override
            public void onBatchScanResults(@NonNull List<ScanResult> results) {
                super.onBatchScanResults(results);
            }

            @Override
            public void onScanFailed(int errorCode) {
                super.onScanFailed(errorCode);
            }
        });
        mCountdownTimer.pause();
    }
}
